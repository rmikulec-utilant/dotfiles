#!/usr/bin/env bash
#
# add-jupyter-kernel [OPTION...] NAME_OF_VIRTUALENV
# OPTIONS:
# add-jupyter-kernel [-p <python-version>] [-m <virtualenv_manager>] [-d] name_of_virtualenv
# -p : (as in python version)
#      allows user to specify version of python if new virtualenv gets created
#      (pyenv only)
# -m : (as in manager for virtual environment)
#      select a virtualenv manager to use. One of
#      -m pyenv (default)
#      -m pipenv
# -d : (as in dotfile)
#      writes a dotfile (.python-version) to the local dir for pyenv-virtualenv
#      (pyenv only)
# -h : (as in help)
#      print a small usage string as a reminder


# bash builtin commands
#
#   -e
# Exit immediately when a command fails
#
#   -o pipefail
# Sets the exit code of a pipeline to that of the rightmost command
# to exit with a non-zero status, or to zero if all commands of the
# pipeline exit successfully.
set -eo pipefail

usage() {
  echo -n "Usage: $0 [-p <python-version>] [-m <virtualenv-manager>] [-d] <virtualenv-name>" 1>&2;
}

while getopts ":dm:p:h" opt; do
  case ${opt} in
    d )
      SET_DOTFILE=1
      ;;
    m )
      VIRTUALENV_MANAGER=${OPTARG}
      ;;
    p )
      PYTHON_VERSION=${OPTARG}
      ;;
    h )
      usage
      exit 0
      ;;
    \? )
      usage
      exit 1
      ;;
    : )
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

if [ $# -ne 1 ]
then
  usage
  exit 1
fi

KERNEL_NAME=$1

if [ -z ${VIRTUALENV_MANAGER} ]
then
  VIRTUALENV_MANAGER="pyenv"
fi

if [ ".${VIRTUALENV_MANAGER}" == ".pyenv" ]
then
  # Check for evidence of pipenv when pipenv has not been specified
  if [ -f Pipfile -o -f Pipfile.lock ]
    then
    echo "WARNING: Pipfile located in directory. Did you actually mean to use: " 1>&2
    echo "  $0 -m pipenv ${KERNEL_NAME}" 1>&2
  fi

  command -v pyenv >/dev/null 2>&1 || { echo >&2 "I require pyenv but it's not installed.  Aborting."; exit 1; }
  # Enable shims and autocompletion:
  eval "$(pyenv init -)"
  # Enable auto-activation of virtualenvs
  eval "$(pyenv virtualenv-init -)"

  # Default PYTHON_VERSION to global python version if creating a new virtualenv
  if [ -z ${PYTHON_VERSION} ]
  then
    PYTHON_VERSION=$(pyenv global)
  fi

  # Create virtualenv if one does not exist already
  pyenv install -s $PYTHON_VERSION
  pyenv virtualenv $PYTHON_VERSION ${KERNEL_NAME} > /dev/null 2>&1 || true

  # Set .python-version for use by pyenv-virtualenv
  if [ "$SET_DOTFILE" ]
  then
    echo "${KERNEL_NAME}" > .python-version
  fi

  # Activate virtualenv and sync to highest-priority requirements file
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
  pyenv activate ${KERNEL_NAME}
  pip install -q pip-tools
  prefixes=( "dev" "tests" "requirements" )
  for prefix in "${prefixes[@]}"
  do
    if [ -f "${prefix}.txt" ]
    then
      pip-sync -q ${prefix}.txt > /dev/null
      break
    elif [ -f "${prefix}.in" ]
    then
      pip-compile -q --generate-hashes ${prefix}.in --output-file ${prefix}.txt > /dev/null
      pip-sync -q ${prefix}.txt > /dev/null
      break
    fi
  done

  # Install ipykernel into virtualenv and add virtualenv kernel to jupyter
  pip install -q ipykernel > /dev/null
  python -m ipykernel install --user --name "${KERNEL_NAME}"

elif [ ".${VIRTUALENV_MANAGER}" == ".pipenv" ]
then
  export PIPENV_QUIET=1
  # If pipenv is not installed, install it
  command -v pipenv >/dev/null 2>&1 || ( pip install -q pipenv; export PATH=${PATH}:~/.local/bin )
  if [ ! -f Pipfile ]
  then
    echo "No Pipfile found in current directory, aborting"
    exit 1
  fi

  if [ ! -f Pipfile.lock ]
  then
    pipenv lock --dev
  fi

  # In case no virtualenv has been created yet (i.e., both Pipfiles were found)
  # go ahead and create one and sync from the Pipfile.lock
  pipenv --venv &> /dev/null || pipenv sync --dev

  # Check if ipykernel is already installed in the virtualenv
  # If not, install it
  pipenv run pip freeze 2>/dev/null | grep -q "^ipykernel==" || pipenv install --ignore-pipfile ipykernel --dev

  # Use ipykernel in the virtualenv to create a new jupyter kernel
  pipenv run -- python -m ipykernel install --user --name "${KERNEL_NAME}"

else
  echo "Unsupported virtualenv manager: ${VIRTUALENV_MANAGER}"
  echo "Choose one of [pyenv, pipenv]"
  usage
  exit 1
fi

# Add current directory to python path for jupyter kernel.
# Similar to pip install -e .
KERNEL_DIR=$HOME/.local/share/jupyter/kernels
# Backup the configuration JSON of the newly created jupyter kernel
cp $KERNEL_DIR/${KERNEL_NAME}/kernel.json \
   $KERNEL_DIR/${KERNEL_NAME}/kernel.json.bak
jq --arg PATH $(pwd) '.env={PYTHONPATH:$PATH}' \
   $KERNEL_DIR/${KERNEL_NAME}/kernel.json.bak > \
   $KERNEL_DIR/${KERNEL_NAME}/kernel.json

exit $?
